return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
#print(curr_word)
if (split_sent[i] == " ") {
new_sent <- c(cat(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- cat(split_sent[i], curr_word, sep = '')
#print("After the cat")
#print(curr_word)
i <- i - 1
}
}
return(new_sent)
}
reverse_words("sentence! this reverse")
?cat
cat("pplpwle", "wefoiwhef", sep = "    ")
var <- cat("pplpwle", "wefoiwhef", sep = "    ")
car
var
var
varv
var
var <- paste
var <- paste("wefowehof", "wefowefw", sep = "  ")
var
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
print(curr_word)
if (split_sent[i] == " ") {
new_sent <- c(paste(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
print("After the cat")
print(curr_word)
i <- i - 1
}
}
return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
new_sent <- c(paste(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
new_sent <- c(paste(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
new_sent <- c(paste(new_sent, curr_word, sep = " "))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = ""))
return(new_sent)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
temp <- paste(new_sent, curr_word, sep = " ")
new_sent <- c(str_replace_all(temp, fixed(" "), ""))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
temp <- paste(new_sent, curr_word, sep = " ")
new_sent <- c(str_replace_all(temp, fixed(" "), ""))
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
str_replace_all(curr_word, fixed(" "), "")
new_sent <- paste(new_sent, curr_word, sep = " ")
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
reverse_words("sentence! this reverse")
?str_split
reverse_words <- function(words) {
print(str_split(words, " "))
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
print(length(splitted))
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")
print(length(splitted[[1]]))
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(split_now)
}
reverse_words("sentence! this reverse")
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " ")
}
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
?str_split
library(stringr)
?str_split
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
reverse_words("sentence! this reverse")
cat(reverse_words("sentence! this reverse"))
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
print(split_now)
print(paste(split_now, sep = " "))
return(paste(split_now, sep = " "))
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
print(split_now)
print(paste(split_now, sep = " "))
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
reverse_words("string")
num_cons(fox)
for (i in 1:9) {
print(paste(paste('plot0', i, sep = ''), ".png", sep = ''))
}
for (i in 10:100) {
print(paste(paste('plot', i, sep = ''), ".png", sep = ''))
}
states <- rownames(USArrests)
head(states, n = 5)
grep(pattern = 'z', x = states)
starts_with <- function(word, letter) {
if (length(grep(pattern = paste("^", letter, sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
starts_with("Hello", 'H')  # TRUE
starts_with("Good morning", 'H')  # FALSE
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
ends_with <- function(word, letter) {
if (length(grep(pattern = paste(letter, '$', sep = ''), x = word) > 0)) {
return(TRUE)
} else {
return(FALSE)
}
}
ends_with("Hello", 'o')  # TRUE
ends_with("Good morning", 'o')  # FALSE
split_chars <- function(char_str) {
char_vect <- strsplit(char_str, NULL)
return(char_vect[[1]])
}
split_chars('Go Bears!')
split_chars('Expecto Patronum')
num_vowels <- function(char_vect) {
count <- rep(0, times = 5)
vowel_names <- c("a", "e", "i", "o", "u")
names(count) <- vowel_names
vowels <- c("a", "e", "i", "o", "u")
for (i in tolower(char_vect)) {
if (i %in% vowels) {
count[which(vowels == i)] <- count[which(vowels == i)] + 1
}
}
return(count)
}
vec <- c('G', 'o', ' ', 'B', 'e', 'a', 'r', 's', '!')
num_vowels(vec)
count_vowels <- function(char_str) {
count_split <- split_chars(char_str)
return(num_vowels(count_split))
}
count_vowels("The quick brown fox jumps over the lazy dog")
count_vowels("THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")
num_cons <- function(input) {
count_split <- split_chars(input)
return(length(grep(pattern = "[^aeiou]",  x = count_split, ignore.case = TRUE))
- length(grep(pattern = "[[:blank:]]",  x = count_split, ignore.case = TRUE)))
}
fox <- "The quick brown fox jumps over the lazy dog"
num_cons(fox)
library(stringr)
reverse_words2 <- function(words) {
split_sent <- split_chars(words)
i <- length(split_sent)
curr_word <- c('')
new_sent <- c('')
while(i != 0) {
if (split_sent[i] == " ") {
str_replace_all(curr_word, fixed(" "), "")
new_sent <- paste(new_sent, curr_word, sep = " ")
curr_word <- c("")
i <- i - 1
} else {
curr_word <- paste(split_sent[i], curr_word, sep = '')
i <- i - 1
}
}
new_sent <- c(paste(new_sent, curr_word, sep = " "))
return(new_sent)
}
library(stringr)
reverse_words <- function(words) {
splitted <- str_split(words, " ")[[1]]
split_now <- splitted
for (i in 1:length(splitted)) {
split_now[i] <- splitted[length(splitted) - i + 1]
}
return(paste(split_now, collapse = " "))
}
reverse_words("sentence! this reverse")
reverse_words("string")
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
install.packages(XML)
install.packages("XML")
library(XML)
# parsing html content
doc <- htmlParse('http://www.berkeley.edu/atoz')
nav_node <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]')
nav_node
navbar_nodes <- getNodeSet(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]/li')
navbar_nodes
xpathSApply(
doc = doc,
path = '//ul[@class="nav navbar-nav secondary-nav"]',
fun = xmlValue)
Alinks <- xpathSApply(
doc = doc,
path = '//div[@class="list-content"]/p/a',
fun = xmlAttrs)
ALinks
Alinks
install.packages(c("BH", "boot", "class", "cluster", "curl", "devtools", "digest", "evaluate", "foreign", "formatR", "ggplot2", "git2r", "gtable", "highr", "htmltools", "httr", "jsonlite", "knitr", "MASS", "Matrix", "memoise", "mgcv", "mime", "munsell", "nlme", "nnet", "plyr", "R6", "Rcpp", "readr", "rmarkdown", "rstudioapi", "rversions", "scales", "spatial", "stringi", "stringr", "survival", "XML", "xml2", "xtable"))
ls
dir
s
ls
cd
x -> []
x -> [1,2,3,4,5]
x -> {1,2,3,4,5}
x <- [1,2,3,4,5]
x <- c(1,2,3,4,5)
nstall.packages("rmarkdown")
install.packages("rmarkdown")
source("../functions/mse_function.R")
load("../../data/testing_ridge.RData")
require("hydroGOF")
require(testthat)
test_that( "MSE Test", {
}
}\
}
setwd("Documents/Fall 2016/Stats 159/projects/proj2/code/tests/")
source("../functions/mse_function.R")
load("../../data/testing_ridge.RData")
require("hydroGOF")
require(testthat)
test_that( "MSE Test", {
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
func_answe = MSE(test_ridge, response)
package_asnwer = mse(test_ridge, response)
expect_that(func_answe, equals(package_asnwer, tolerance = .1))
})
?mse
mse
MSE
test_that( "MSE Test", {
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
func_answe = MSE(test_ridge, response)
package_asnwer = mse(test_ridge, response)
expect_that(func_answe, equals(package_asnwer, tolerance = .1))
})
test_that( "MSE Test", {
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
length(response)
lenght(test_ridge)
func_answer = MSE(test_ridge, response)
package_asnwer = mse(test_ridge, response)
expect_that(func_answer, equals(package_asnwer, tolerance = .1))
})
test_that( "MSE Test", {
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
length(response)
length(test_ridge)
func_answer = MSE(test_ridge, response)
package_asnwer = mse(test_ridge, response)
expect_that(func_answer, equals(package_asnwer, tolerance = .1))
})
test_that( "MSE Test", {
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
length(response)
length(test_ridge)
func_answer = MSE(test_ridge, response)
package_asnwer = mse(test_ridge, response)
expect_that(func_answer, equals(package_asnwer, tolerance = .1))
})
test_ridge
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
length(response)
length(test_ridge)
MSE(test_ridge, response)
mse(test_ridge, response)
mse(as.vector(test_ridge), response)
test_that( "MSE Test", {
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$Balance
length(response)
length(test_ridge)
func_answer = MSE(test_ridge, response)
package_asnwer = mse(as.vector(test_ridge), response)
expect_that(func_answer, equals(package_asnwer, tolerance = .1))
})
