report1 <- count(present_quarter, "force")
colnames(report1)[2] <- "Reports Quarter to Date"
present_access <- present_quarter[!is.na(present_quarter$accessed),]
access1 <- count(present_access, "force")
colnames(access1)[2] <- "Accessed Quarter to Date"
to.date.data <- merge(report1, access1, by = "force", all.x = TRUE)
to.date.data[is.na(to.date.data)] <- 0
percent2 <- round((to.date.data$`Accessed Quarter to Date`/to.date.data$`Reports Quarter to Date`) * 100)
to.date.data$`Percent Accessed`  <- paste(percent2, '%', sep = "")
to.date.data <- to.date.data[order(-to.date.data[,3]),]
to.date.data <- to.date.data[!grepl('^$', to.date.data$force),]
new.data <- merge(access_data, to.date.data, by = 'force', all = TRUE)
past_quarter <- x[grep("Past Quarter", x$created.y),]
report2 <- count(past_quarter, "force")
colnames(report2)[2] <- "Reports Past Quarter"
past_access <- past_quarter[!is.na(past_quarter$accessed),]
access2 <- count(past_access, "force")
colnames(access2)[2] <- "Accessed Past Quarter"
past.data <- merge(report2, access2, by = "force", all.x = TRUE)
past.data[is.na(past.data)] <- 0
percent3 <- round((past.data$`Accessed Past Quarter`/past.data$`Reports Past Quarter`) * 100)
past.data$`Percent Accessed`  <- paste(percent3, '%', sep = "")
past.data <- past.data[order(-past.data[,3]),]
past.data <- past.data[!grepl('^$', past.data$force),]
full_accessed_data <- merge(new.data, past.data, by = 'force', all = TRUE)
full_accessed_data$`Number Not Accessed` <- full_accessed_data$`Number Reported` - full_accessed_data$`Number Accessed`
percent4 <- round((full_accessed_data$`Number Not Accessed` / full_accessed_data$`Number Reported`) * 100)
full_accessed_data$`Percent Not Accessed`  <- paste(percent4, '%', sep = "")
new_merge <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
#new_merge$created.y <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$created.y)
new_merge$created.y <- as.POSIXct(new_merge$created.y)
#new_merge$accessed <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$accessed)
new_merge$accessed <- as.POSIXct(new_merge$accessed)
new_merge$force <- gsub(" \\[UK\\]", "", new_merge$force)
for (i in 1:nrow(new_merge)) {
if (new_merge[i,16] == 1) {
new_merge[i,25] <- 'metropolitan hate crime'
} else if (new_merge[i,16] == 2) {
new_merge[i,25] <- 'sussex hate crime'
}
}
new_merge$`access time` <- new_merge$accessed-new_merge$created.y
time.avg <- aggregate(`access time`~ force, data = new_merge, FUN = function(x) median = median(x))
time.avg$`access time` <- round(time.avg$`access time`)
colnames(time.avg)[2] <- "Time til Accessed (Minutes)"
full_accessed_data <- merge(full_accessed_data, time.avg, by = "force", all = TRUE)
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,2]),]
colnames(full_access
ed_data)[c(4,7,10)] <- c("Percent Accessed", "Percent Accessed Quarter to Date", "Percent Accessed Past Quarter")
View(time.avg)
View(new_merge)
colnames(full_accessed_data)
police_rep_online <- getURL('http://dev.myevidence.org/utilities/police_data_access.php', userpwd = 'todd:Ainem2eigh')
write(police_rep_online, file = 'online_database.csv')
police_report <- read.csv('online_database.csv')
police_access_online <- getURL('http://dev.myevidence.org/utilities/police_access_access.php', userpwd = 'todd:Ainem2eigh')
write(police_access_online, file = 'online_accesslog.csv')
police_access <- read.csv('online_accesslog.csv')
## Clean police access
police_access <- police_access[!grepl("gt.witnessconfident@gmail.com", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[!grepl("geoff.tibbs@witnessconfident.org", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[!grepl("selfevident@justevidence.org", police_access$email_used, ignore.case = TRUE),]
police_access <- police_access[grepl("^used_.*", police_access$password, ignore.case = TRUE),]
police_access <- subset(police_access, !duplicated(police_access[,2]))
x <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
x$force <- gsub(" \\[UK\\]", "", x$force)
for (i in 1:nrow(x)) {
if (x[i,16] == 1) {
x[i,25] <- 'metropolitan hate crime'
} else if (x[i,16] == 2) {
x[i,25] <- 'sussex hate crime'
}
}
x_1 <- count(x, "force")
colnames(x_1)[2] <- "Number Reported"
y <- merge(police_access, police_report, by = 'report_id', all.x = TRUE)
y$force <- gsub(" \\[UK\\]", "", y$force)
y$where_you_live[is.na(y$where_you_live)] <- 0
for (i in 1:nrow(y)) {
if (y[i,16] == 1) {
y[i,25] <- 'metropolitan hate crime'
} else if (y[i,16] == 2) {
y[i,25] <- 'sussex hate crime'
}
}
y_1 <- count(y, "force")
colnames(y_1)[2] <- "Number Accessed"
access_data <- merge(x_1, y_1, by = "force", all.x = TRUE)
access_data[is.na(access_data)] <- 0
percent1 <- round((access_data$`Number Accessed`/access_data$`Number Reported`) * 100)
access_data$`Percent Accessed`  <- paste(percent1, '%', sep = "")
access_data <- access_data[order(-access_data[,3]),]
access_data <- access_data[!grepl('^$', access_data$force),]
x$created.y <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", x$created.y)
for (i in 1:nrow(x)) {
if (x[i, 10] >= new_quarter) {
x[i,10] <- "Quarter to Date"
} else if (old_quarter <= x[i, 10] & x[i,10] < new_quarter) {
x[i,10] <- "Past Quarter"
} else {
x[i,10] <- "All-Time"
}
}
present_quarter <- x[grep("Quarter to Date", x$created.y),]
report1 <- count(present_quarter, "force")
colnames(report1)[2] <- "Reports Quarter to Date"
present_access <- present_quarter[!is.na(present_quarter$accessed),]
access1 <- count(present_access, "force")
colnames(access1)[2] <- "Accessed Quarter to Date"
to.date.data <- merge(report1, access1, by = "force", all.x = TRUE)
to.date.data[is.na(to.date.data)] <- 0
percent2 <- round((to.date.data$`Accessed Quarter to Date`/to.date.data$`Reports Quarter to Date`) * 100)
to.date.data$`Percent Accessed`  <- paste(percent2, '%', sep = "")
to.date.data <- to.date.data[order(-to.date.data[,3]),]
to.date.data <- to.date.data[!grepl('^$', to.date.data$force),]
new.data <- merge(access_data, to.date.data, by = 'force', all = TRUE)
past_quarter <- x[grep("Past Quarter", x$created.y),]
report2 <- count(past_quarter, "force")
colnames(report2)[2] <- "Reports Past Quarter"
past_access <- past_quarter[!is.na(past_quarter$accessed),]
access2 <- count(past_access, "force")
colnames(access2)[2] <- "Accessed Past Quarter"
past.data <- merge(report2, access2, by = "force", all.x = TRUE)
past.data[is.na(past.data)] <- 0
percent3 <- round((past.data$`Accessed Past Quarter`/past.data$`Reports Past Quarter`) * 100)
past.data$`Percent Accessed`  <- paste(percent3, '%', sep = "")
past.data <- past.data[order(-past.data[,3]),]
past.data <- past.data[!grepl('^$', past.data$force),]
full_accessed_data <- merge(new.data, past.data, by = 'force', all = TRUE)
full_accessed_data$`Number Not Accessed` <- full_accessed_data$`Number Reported` - full_accessed_data$`Number Accessed`
percent4 <- round((full_accessed_data$`Number Not Accessed` / full_accessed_data$`Number Reported`) * 100)
full_accessed_data$`Percent Not Accessed`  <- paste(percent4, '%', sep = "")
new_merge <- merge(police_access, police_report, by = "report_id", all.y = TRUE)
#new_merge$created.y <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$created.y)
new_merge$created.y <- as.POSIXct(new_merge$created.y)
#new_merge$accessed <- gsub(" ([0123456789]{2}:[0123456789]{2}:[0123456789]{2})$", "", new_merge$accessed)
new_merge$accessed <- as.POSIXct(new_merge$accessed)
new_merge$force <- gsub(" \\[UK\\]", "", new_merge$force)
for (i in 1:nrow(new_merge)) {
if (new_merge[i,16] == 1) {
new_merge[i,25] <- 'metropolitan hate crime'
} else if (new_merge[i,16] == 2) {
new_merge[i,25] <- 'sussex hate crime'
}
}
new_merge$`access time` <- new_merge$accessed-new_merge$created.y
time.avg <- aggregate(`access time`~ force, data = new_merge, FUN = function(x) median = median(x))
time.avg$`access time` <- round(time.avg$`access time`)
colnames(time.avg)[2] <- "Time til Accessed (Minutes)"
full_accessed_data <- merge(full_accessed_data, time.avg, by = "force", all = TRUE)
full_accessed_data <- full_accessed_data[order(-full_accessed_data[,2]),]
colnames(full_accessed_data)[c(4,7,10)] <- c("Percent Accessed", "Percent Accessed Quarter to Date", "Percent Accessed Past Quarter")
full_accessed_data[is.na(full_accessed_data[,c(2,3,5,6,8,9,11)])] <- 0
full_accessed_data[is.na(full_accessed_data[,c(4,7,10)])] <- "0%"
full_accessed_data[,c(2,3,5,6,8,9,11)][is.na(full_accessed_data[,c(2,3,5,6,8,9,11)])] <- 0
full_accessed_data[,c(4,7,10)][is.na(full_accessed_data[,c(4,7,10)])] <- "0%"
grep("", full_accessed_data$force)
grep("^$", full_accessed_data$force)
full_accessed_data <- full_accessed_data[-grep("^$", full_accessed_data$force),]
<<echo=FALSE, results='asis'>>=
2+2
@
\end{center}
Analysis of these numbers will reveal which model has the most predictive power.
\subsection{Hypothesis Testing}
as.vector(ridge_short_coef)
load('../../data/MSE_ridge.RData')
load('../../data/MSE_pcr.RData')
load('../../data/MSE_lasso.RData')
load('../../data/ridge_model.RData')
load('../../data/lasso_model.RData')
load('../../data/pcr_model.RData')
load('../../data/MSE_short_ridge.RData')
load('../../data/MSE_short_pcr.RData')
load('../../data/MSE_short_lasso.RData')
load('../../data/ridge_short_model.RData')
load('../../data/lasso_short_model.RData')
load('../../data/pcr_short_model.RData')
load('../../data/hyp_results.RData')
getwd()
setwd("Documents/Senior Year/Stat 159/stat159-fall2016-project3")
load('../../data/MSE_ridge.RData')
load('../../data/MSE_pcr.RData')
load('../../data/MSE_lasso.RData')
load('../../data/ridge_model.RData')
load('../../data/lasso_model.RData')
load('../../data/pcr_model.RData')
load('../../data/MSE_short_ridge.RData')
load('../../data/MSE_short_pcr.RData')
load('../../data/MSE_short_lasso.RData')
load('../../data/ridge_short_model.RData')
load('../../data/lasso_short_model.RData')
load('../../data/pcr_short_model.RData')
load('../../data/hyp_results.RData')
getwd()
setwd("Documents/Senior Year/Stat 159/stat159-fall2016-project3/report/sections")
setwd("Documents/Senior Year/Stat 159/stat159-fall2016-project3/report/Sections")
getwd()
setwd("Documents/Senior Year/Stat 159/stat159-fall2016-project3/report")
getwd()
setwd("report/Sections")
getwd()
load('../../data/MSE_ridge.RData')
load('../../data/MSE_pcr.RData')
load('../../data/MSE_lasso.RData')
load('../../data/ridge_model.RData')
load('../../data/lasso_model.RData')
load('../../data/pcr_model.RData')
load('../../data/MSE_short_ridge.RData')
load('../../data/MSE_short_pcr.RData')
load('../../data/MSE_short_lasso.RData')
load('../../data/ridge_short_model.RData')
load('../../data/lasso_short_model.RData')
load('../../data/pcr_short_model.RData')
load('../../data/hyp_results.RData')
as.vector(ridge_short_coef)
as.vector(lasso_short_coef)
as.vector(pcr_short_coef)
PCR <- append(PCR, 0, 0)
PCR <- as.vector(pcr_short_coef)
PCR <- append(PCR, 0, 0)
PCR
Coef.frame <- data.frame(Variables, Ridge, Lasso, PCR)
Coef_table <- xtable(Coef.frame, caption="Information about Model Coefficients", digits = 3)
print(Coef_table, type="latex")
library(xtable)
Coef.frame <- data.frame(Variables, Ridge, Lasso, PCR)
Variables <- c("UNEMP_RATE", "INEXPFTE", "TUITIONFEE_IN", "AVGFACSAL", "C150_4", "C150_L4", "RET_FT4", "PELL_COMP_ORIG_YR2_RT", "PELL_COMP_ORIG_YR3_RT", "PELL_COMP_ORIG_YR4_RT", "CDR2")
Coef.frame <- data.frame(Variables, Ridge, Lasso, PCR)
Ridge <- as.vector(ridge_short_coef)
Lasso <- as.vector(lasso_short_coef)
Coef.frame <- data.frame(Variables, Ridge, Lasso, PCR)
Coef_table <- xtable(Coef.frame, caption="Information about Model Coefficients", digits = 3)
print(Coef_table, type="latex")
data_2006 <- read.csv("../../data/MERGED2005_06_PP.csv")
for (i in 1:ncol(data_2006)) {
if (is.factor(data_2006[,i]) == TRUE) {
data_2006[,i] <- as.numeric(levels(data_2006[,i]))[data_2006[,i]]
}
}
data_2006 <- data_2006[, colSums(is.na(data_2006)) <= .5 * nrow(data_2006)]
data_2006 <- read.csv("../../data/data_2006.csv")
scaled <- read.csv("../../data/scaled_data_2006.csv")
test <- read.csv("../../data/test_data.csv")
train <- read.csv("../../data/training_data.csv")
lo <- data_2006$INC_PCT_LO
m1 <- data_2006$INC_PCT_M1
m2 <- data_2006$INC_PCT_M2
h1 <- data_2006$INC_PCT_H1
pct_fin <- lo + m1 + m2 + h1
data_2006 <- cbind(data_2006, pct_fin)
nrow(data_2006)
length(pct_fin)
data_2006 <- read.csv("../../data/MERGED2005_06_PP.csv")
for (i in 1:ncol(data_2006)) {
if (is.factor(data_2006[,i]) == TRUE) {
data_2006[,i] <- as.numeric(levels(data_2006[,i]))[data_2006[,i]]
}
}
data_short_2006 <- data_2006[,c("UNEMP_RATE", "INEXPFTE", "TUITIONFEE_IN", "AVGFACSAL", "C150_4", "C150_L4", "RET_FT4", "PELL_COMP_ORIG_YR2_RT", "PELL_COMP_ORIG_YR3_RT", "PELL_COMP_ORIG_YR4_RT", "CDR2")]
write.csv(data_short_2006, file = "../../data/data_short_2006.csv")
##### remove columns with less than 50% of data missing
data_2006 <- data_2006[, colSums(is.na(data_2006)) <= .5 * nrow(data_2006)]
data_2006 <- data_2006[,c(-1,-2,-3)]
write.csv(data_2006, file = "../../data/data_2006.csv")
lo <- data_2006$INC_PCT_LO
m1 <- data_2006$INC_PCT_M1
m2 <- data_2006$INC_PCT_M2
h1 <- data_2006$INC_PCT_H1
pct_fin <- lo + m1 + m2 + h1
nrow(data_2006)
length(pct_fin)
data_2006 <- cbind(data_2006, pct_fin)
png("../../images/percent_aided_students_hist.png")
hist(data_2006$pct_fin, breaks = 30, main = "Histogram of Financial Aid", xlab = "Percent of Students")
dev.off()
mysum <- summary(pct_fin)
save(mysum, file = "../../data/financial_aid_percentage.RData")
low <- subset(data_2006, pct_fin >= 0.6 & pct_fin < 0.91)
low_mid <- subset(data_2006, pct_fin >= 0.91 & pct_fin < 0.96)
mid_high <- subset(data_2006, pct_fin >= 0.96 & pct_fin < 0.984)
high <- subset(data_2006, pct_fin >= 0.984 & pct_fin < 1)
save(low, low_mid, mid_high, high, file = "../../data/data_by_finaid.RData")
source("../functions/unemployment.R")
unemp_low <- unemployment_six_years(low)
low_mean <- mean(unemp_low)
unemp_low_mid <- unemployment_six_years(low_mid)
low_mid_mean <- mean(unemp_low_mid)
unemp_mid_high <- unemployment_six_years(mid_high)
mid_high_mean <- mean(unemp_mid_high)
unemp_high <- unemployment_six_years(high)
high_mean <- mean(unemp_high)
png("../../images/unemployment.png")
barplot(c(low_mean, low_mid_mean, mid_high_mean, high_mean), col = c("#DB71C3", "#49A8BE", "#C8A9D1", "#D11D56"), main = "Unemployment Rate by Aid Percentage", xlab = "Percentage of Students who Recieved Financial Aid", ylab = "Unemployment Rate Six Years after Entry", names.arg = c("Low", "Low-Middle", "Middle-High", "High"), cex.names = 0.6)
dev.off()
getwd()
setwd("../../")
getwd()
setwd("code/Scripts")
source("../functions/unemployment.R")
unemp_low <- unemployment_six_years(low)
low_mean <- mean(unemp_low)
unemp_low_mid <- unemployment_six_years(low_mid)
low_mid_mean <- mean(unemp_low_mid)
unemp_mid_high <- unemployment_six_years(mid_high)
mid_high_mean <- mean(unemp_mid_high)
unemp_high <- unemployment_six_years(high)
high_mean <- mean(unemp_high)
png("../../images/unemployment.png")
barplot(c(low_mean, low_mid_mean, mid_high_mean, high_mean), col = c("#DB71C3", "#49A8BE", "#C8A9D1", "#D11D56"), main = "Unemployment Rate by Aid Percentage", xlab = "Percentage of Students who Recieved Financial Aid", ylab = "Unemployment Rate Six Years after Entry", names.arg = c("Low", "Low-Middle", "Middle-High", "High"), cex.names = 0.6)
dev.off()
estimate <- (.5*low_mean + .5*low_mid_mean) - (.5*mid_high_mean + .5*high_mean)
x <- c(unemp_low, unemp_low_mid, unemp_mid_high, unemp_high)
varx <- (var(x)) * (((.5^2)/length(unemp_low)) +
((.5^2)/length(unemp_low_mid)) +
((.5^2)/length(unemp_mid_high)) +
((.5^2)/length(unemp_high))
)
save(estimate, x, varx, file = "../../data/hyp_results.RData")
sink("../../data/CI_hyptest_1.txt")
noquote(paste("high end :", estimate + (1.96 * sqrt(varx)), sep = " "))
noquote(paste("low end :", estimate - (1.96*sqrt(varx)), sep = " "))
sink()
as.vector(ridge_coef)
ridge_coef
max(ridge_coef)
colnames(ridge_coef)
?max
tail(sort(ridge_coef), 5)
as.data.frame(ridge_coef)
is.vector(ridge_coef)
class(ridge_coef)
as.data.frame(ridge_coef[, 1, drop = FALSE])
ridge_coef[, 1, drop = FALSE]
as.data.frame.matrix(ridge_coef)
as.data.frame.matrix(ridge_coef)
ridge_coef <- as.data.frame.matrix(ridge_coef)
View(ridge_coef)
ridge_coef <- as.data.frame.matrix(ridge_coef)
tail(sort(ridge_coef), 5)
sort(ridge_coef)
ridge_coef <- as.data.frame.matrix(ridge_coef)
tail(sort(ridge_coef), 5)
tail(sort(ridge_coef[,2]), 5)
ridge_coef[,2]
tail(sort(ridge_coef[,1]), 5)
ridge_coeffs <- tail(sort(ridge_coef[,1]), 5)
ridge_coef[,1] == ridge_coeffs
ridge_coef[,ridge_coef[,1] == ridge_coeffs]
ridge_coef[ridge_coef[,1] == ridge_coeffs]
ridge_coef[ridge_coef[,1] == ridge_coeffs,]
abs(ridge_coef$`1`)
ridge_coef$`1` <- abs(ridge_coef$`1`)
View(ridge_coef)
tail(sort(ridge_coef[,1]), 5)
ridge_coef[,1] == ridge_coeffs
row.names(ridge_coef)
ridge_coef <- as.data.frame.matrix(ridge_coef)
row.names(ridge_coef)
ridge_coef$`1` <- abs(ridge_coef$`1`)
ridge_coeffs <- tail(sort(ridge_coef[,1]), 5)
ridge_coef[ridge_coef[,1] == ridge_coeffs,]
order(ridge_coef)[1:5]
ridge_coef[order(ridge_coef)[1:5]]
ridge_coef[order(ridge_coef)[1:5],]
?order
ridge_coef[order(ridge_coef, decreasing = TRUE)[1:5],]
ridge_coeffs <- ridge_coef[order(ridge_coef, decreasing = TRUE)[1:5],]
is.data.frame(ridge_coef)
row.names(ridge_coef)[1:5]
ridge_coef[order(ridge_coef, decreasing = TRUE)]
order(ridge_coef, decreasing = TRUE)
ridge_coef[order(ridge_coef, decreasing = TRUE),]
ridge_coef <- as.data.frame.matrix(ridge_coef)
load('../../data/ridge_model.RData')
ridge_coef <- as.data.frame.matrix(ridge_coef)
ridge_coef$`1` <- abs(ridge_coef$`1`)
ridge_coef[order(ridge_coef, decreasing = TRUE),]
ridge_coeffs <- ridge_coef[order(ridge_coef, decreasing = TRUE),]
row.names(ridge_coeffs)[1:5]
ridge_coef[order(ridge_coef, decreasing = TRUE),]
order(ridge_coef, decreasing = TRUE)
rows <- order(ridge_coef, decreasing = TRUE)[1:5]
row.names(ridge_coeffs)[rows]
row.names(ridge_coeffs[rows,])
as.vector(rows)
rows <- as.vector(rows)
row.names(ridge_coeffs[rows,])
ridge_coeffs[rows,]
row.names(ridge_coef[rows,])
idge_coef[rows,]
ridge_coef[rows,]
load('../../data/ridge_model.RData')
ridge_coef <- as.data.frame.matrix(ridge_coef)
row.names(ridge_coef)
ridge_coef$'Predictors' <- row.names(ridge_coef)
ridge_coef$`1` <- abs(ridge_coef$`1`)
View(ridge_coef)
rows <- order(ridge_coef, decreasing = TRUE)[1:5]
rows <- as.vector(rows)
row.names(ridge_coef[rows,])
rows <-
ridge_coef[order(ridge_coef, decreasing = TRUE),]
load('../../data/ridge_model.RData')
ridge_coef <- as.data.frame.matrix(ridge_coef)
ridge_coef$'Predictors' <- row.names(ridge_coef)
ridge_coef$`1` <- abs(ridge_coef$`1`)
ridge_coef[order(ridge_coef, decreasing = TRUE),]
View(ridge_coef)
load('../../data/ridge_model.RData')
ridge_coef <- as.data.frame.matrix(ridge_coef)
ridge_coef$'Predictors' <- row.names(ridge_coef)
ridge_coef$`1` <- abs(ridge_coef$`1`)
View(ridge_coef)
rows <- ridge_coef[order(ridge_coef, decreasing = TRUE),]
View(rows)
rows <- ridge_coef[order(ridge_coef[,1], decreasing = TRUE),]
View(rows)
ridge_coefficient <- ridge_coefficient[order(ridge_coefficient[,1], decreasing = TRUE),]
load('../../data/ridge_model.RData')
ridge_coefficient <- as.data.frame.matrix(ridge_coef)
ridge_coefficient$'Predictors' <- row.names(ridge_coefficient)
ridge_coefficient$`1` <- abs(ridge_coefficient$`1`)
ridge_coefficient <- ridge_coefficient[order(ridge_coefficient[,1], decreasing = TRUE),]
View(ridge_coefficient)
load('../../data/ridge_model.RData')
ridge_coefficient <- as.data.frame.matrix(ridge_coef)
ridge_coefficient$'Predictors' <- row.names(ridge_coefficient)
ridge_coefficient <- ridge_coefficient[order(abs(ridge_coefficient[,1]), decreasing = TRUE),]
ridge_coefficient[1:5]
ridge_coefficient[1:5,]
ridge_coefficients <- ridge_coefficient[1:5,]
View(ridge_coefficient)
View(ridge_coefficients)
ridge_coefficient <- ridge_coefficient[1:5,]
View(ridge_coefficient)
Coefficient <- ridge_coefficient$`1`
is.vector(Coefficient)
is.numeric(Coefficient[1])
coefficient_table <- data.frame(Predictor, Coefficient)
Coefficient <- ridge_coefficient$`1`
Predictor <- ridge_coefficient$Predictors
coefficient_table <- data.frame(Predictor, Coefficient)
View(coefficient_table)
Coefficient_table <- xtable(coefficient_table, caption="Information about top 5  Ridge Model Coefficients")
print(Coefficient_table, type="latex")
class(Coefficient)
class(Predictor)
ridge_coefficient <- as.data.frame.matrix(ridge_coef)
ridge_coefficient$'Predictors' <- row.names(ridge_coefficient)
ridge_coefficient <- ridge_coefficient[order(abs(ridge_coefficient[,1]), decreasing = TRUE),]
ridge_coefficient <- ridge_coefficient[1:5,]
Coefficient <- ridge_coefficient$`1`
Coefficient <- as.vector(Coefficient)
Predictor <- ridge_coefficient$Predictors
Predictor <- as.vector(Predictor)
coefficient_table <- data.frame(Predictor, Coefficient)
Coefficient_table <- xtable(coefficient_table, caption="Information about top 5  Ridge Model Coefficients")
print(Coefficient_table, type="latex")
View(Coef_table)
View(coefficient_table)
ridge_coefficient <- as.data.frame.matrix(ridge_coef)
ridge_coefficient <- as.data.frame.matrix(ridge_coef)
Coefficient <- ridge_coefficient$`1`
d
ridge_coefficient <- as.data.frame.matrix(ridge_coef)
ridge_coefficient$'Predictors' <- row.names(ridge_coefficient)
ridge_coefficient <- ridge_coefficient[order(abs(ridge_coefficient[,1]), decreasing = TRUE),]
ridge_coefficient <- ridge_coefficient[1:5,]
Coefficient <- ridge_coefficient$`1`
Coefficient <- as.vector(Coefficient)
Predictor <- ridge_coefficient$Predictors
Predictor <- as.vector(Predictor)
coefficient_table <- data.frame(Predictor, Coefficient)
Coefficient_table <- xtable(coefficient_table, caption="Information about top 5  Ridge Model Coefficients")
print(Coefficient_table, type="latex")
ridge_coefficient <- as.data.frame.matrix(ridge_coef)
ridge_coefficient$'Predictors' <- row.names(ridge_coefficient)
ridge_coefficient <- ridge_coefficient[order(abs(ridge_coefficient[,1]), decreasing = TRUE),]
ridge_coefficient <- ridge_coefficient[1:5,]
Coefficient <- ridge_coefficient$`1`
Coefficient <- as.vector(Coefficient)
Predictor <- ridge_coefficient$Predictors
Predictor <- as.vector(Predictor)
coefficient_table <- data.frame(Predictor, Coefficient)
Coefficient_table <- xtable(coefficient_table, caption="Information about top 5  Ridge Model Coefficients")
print(Coefficient_table, type="latex")
@
ridge_coef
?as.data.frame.matrix
ridge_coefficient <- as.data.frame.matrix(ridge_coef)
ridge_coefficient$'Predictors' <- row.names(ridge_coefficient)
ridge_coefficient <- ridge_coefficient[order(abs(ridge_coefficient[,1]), decreasing = TRUE),]
ridge_coefficient <- ridge_coefficient[1:5,]
Coefficient <- ridge_coefficient$`1`
Coefficient <- as.vector(Coefficient)
Predictor <- ridge_coefficient$Predictors
Predictor <- as.vector(Predictor)
coefficient_table <- data.frame(Predictor, Coefficient)
Coefficient_table <- xtable(coefficient_table, caption="Information about top 5  Ridge Model Coefficients")
print(Coefficient_table, type="latex")
ridge_coefficient <- as.data.frame.matrix(ridge_coef)
ridge_coefficient$'Predictors' <- row.names(ridge_coefficient)
ridge_coefficient <- ridge_coefficient[order(abs(ridge_coefficient[,1]), decreasing = TRUE),]
ridge_coefficient <- ridge_coefficient[1:5,]
Coefficient <- ridge_coefficient$`1`
Coefficient <- as.vector(Coefficient)
Predictor <- ridge_coefficient$Predictors
Predictor <- as.vector(Predictor)
coefficient_table <- data.frame(Predictor, Coefficient)
Coefficient_table <- xtable(coefficient_table, caption="Information about top 5  Ridge Model Coefficients")
print(Coefficient_table, type="latex")
