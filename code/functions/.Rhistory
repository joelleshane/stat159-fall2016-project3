setwd("Documents/Fall 2016/Stats 159/projects/proj3/")
setwd("~/Documents/Fall 2016/Stats 159/projects/proj3/shiny")
shiny::runApp()
validationplot
?validationplot
??validationplot
install.packages("pls")
shiny::runApp()
shiny::runApp()
validationplot
?validationplot
??validationplot
pls
package(pls)
require.package("pls")
require(pls)
validationplot
training_data <- read.csv("../../data/training_data.csv")
shiny::runApp()
shiny::runApp()
input$Model <- "pcr_model"
model <- "pcr_model"
model_load <- paste("../data/",model, ".RData", sep = "")
load(model_load)
model_var = as.symbol(model)
validationplot(eval(model_var))
pcr_model
model_load
load(model_load)
pcr_model
model_var = as.symbol(model)
validationplot(eval(model_var))
save(bestmodel_lasso,lasso_model, file = "../../data/lasso_model.RData")
lasso_model
shiny::runApp()
ridge_model <- cross_v
shiny::runApp()
shiny::runApp()
model_load <- paste("../data/",input$Model, "_model.RData", sep = "")
model <- "pcr"
model_load <- paste("../data/",model, "_model.RData", sep = "")
model_load
load(model_load)
pcr_model
shiny::runApp()
model <- paste(inpit$Model,"_model", sep = "")
model <- paste("pcr","_model", sep = "")
model
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(pcr_model)
model_load <- paste("../data/","lasso", "_model.RData", sep = "")
model_load
load(model_load)
lass0_model
lasso_model
validationplot(lasso_model)
bestmodel_lasso
validationplot(bestmodel_lasso)
training_data <- training_data[,-1]
library("glmnet")
library("lars")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Documents/Fall 2016/Stats 159/projects/proj3/code/functions")
training_data <- read.csv("../../data/training_data.csv")
#unemployment rate, this is our first indicator of a successful college
set.seed (1000)
pca<- prcomp(training_data, center = TRUE, scale. = FALSE)
#note that the first component contains all the variance pca this means all the variance in the data is explained in the first principal component
plot(pca, type = "l")
summary(pca)
#All the data goes to the first component, no dimensionality reduction is useful
#for principal component regression
require(pls)
set.seed (1000)
pcr_model <- pcr(UNEMP_RATE~., data = training_data, scale = TRUE, validation = "CV")
training_data <- read.csv("../../data/training_short_data.csv")
#for principal component regression
set.seed (1000)
pcr_short_model <- pcr(UNEMP_RATE~., data = training_short_data, scale = TRUE, validation = "CV")
training_short_data <- read.csv("../../data/training_short_data.csv")
#for principal component regression
set.seed (1000)
pcr_short_model <- pcr(UNEMP_RATE~., data = training_short_data, scale = TRUE, validation = "CV")
ncomp_short_pcr <- which(pcr_short_model$validation$PRESS == min(pcr_short_model$validation$PRESS)) #selects components with best model
pcr_short_coef <- coef(pcr_model)
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
predplot(pcr_short_model)
coefplot(pcr_short_model)
save(pcr_short_coef, pcr_short_model, file = "../../data/pcr_short_model.RData")
predplot(pcr_short_model)
coefplot(pcr_short_model)
#Adding Histograms to Images
png('../../images/CV_Errors_pcr.png')
validationplot(pcr_short_model, val.type = "MSEP")
dev.off()
#Test Data
test_short_data <- read.csv("../../data/test_short_data.csv")
#need to figure out how many components, look at validation plot
pcr_short_pred <- predict(pcr_short_model, test_short_data, ncomp = 90)
response_short <- test_short_data["UNEMP_RATE"]
validationplot(pcr_short_model, val.type = "MSEP")
dev.off()
#Test Data
test_short_data <- read.csv("../../data/test_short_data.csv")
#need to figure out how many components, look at validation plot
pcr_short_pred <- predict(pcr_short_model, test_short_data, ncomp = 90)
pcr_short_pred <- predict(pcr_short_model, test_short_data)
response_short <- test_short_data["UNEMP_RATE"]
response_short <- as.matrix(response_short)
#error, test accuracy
source("../functions/mse_function.R")
MSE_short_pcr = MSE(pcr_short_pred, response_short)
save(MSE_short_pcr, file = "../../data/MSE_short_pcr.RData")
#saving  the important stuff
sink(file = "../../data/pcr_short_model.txt")
MSE_short_pcr = MSE(pcr_short_pred, response_short)
pcr_short_pred <- predict(pcr_short_model, test_short_data)
response_short <- test_short_data["UNEMP_RATE"]
response_short <- as.matrix(response_short)
#error, test accuracy
source("../functions/mse_function.R")
MSE_short_pcr = MSE(pcr_short_pred, response_short)
save(MSE_short_pcr, file = "../../data/MSE_short_pcr.RData")
#saving  the important stuff
sink(file = "../../data/pcr_short_model.txt")
print("The PCR model")
pcr_short_coef
print("applied predictors")
pcr_short_pred
print("The PCR MSE")
MSE_pcr
MSE_short_pcr
MSE_short_pcr
pcr_short_pred <- predict(pcr_short_model, test_short_data)
response_short <- test_short_data["UNEMP_RATE"]
response_short <- as.matrix(response_short)
pcr_short_coef
pcr_short_coef <- coef(pcr_model)
pcr_short_coef
training_short_data <- read.csv("../../data/training_short_data.csv")
#for principal component regression
set.seed (1000)
pcr_short_model <- pcr(UNEMP_RATE~., data = training_short_data, scale = TRUE, validation = "CV")
pcr_short_model
1+1
2+2
print("hello")
print("hello")
quit()
