setwd("~/Documents/Fall 2016/Stats 159/projects/proj3/code/scripts")
?require
?library
?require
library("glmnet")
library("lars")
training_data <- read.csv("../../data/training_data.csv")
Rscript data_cleaning.R
training_data <- read.csv("../../data/training_data.csv")
training_data <- read.csv("../../data/training_data.csv")
training_data <- training_data[,-1]
#Getting response and predictors
response <- training_data$UNEMP_RATE
response <- as.matrix(response)
predictors <- training_data[,-which(names(training_data) == "UNEMP_RATE")]
predictors <- as.matrix(predictors)
grid <- 10^seq(10, -2, length = 100)
set.seed(1)
lasso_model <- cv.glmnet(predictors, response, lambda = grid, alpha = 1, intercept = FALSE, standardize = FALSE)
lasso_coef <- coef(lasso_model, lasso_model$lambda.min)
save(lasso_coef,lasso_model, file = "../../data/lasso_model.RData")
png("../../images/CV_errors_lasso.png")
plot(lasso_model, main = "CV Errors Lasso")
dev.off()
plot(lasso_model, main = "CV Errors Lasso")
dev.off()
test_data <- read.csv("../../data/test_data.csv")
test_data <- test_data[,-1]
test_predictors <- test_data[,-which(names(training_data) == "UNEMP_RATE")]
test_predictors <- as.matrix(test_predictors)
test_response <- test_data$UNEMP_RATE
predicted_response <- predict(lasso_model, newx=test_predictors, s = "lambda.min", type = "response")
predicted_response <- as.vector(predicted_response)
source("../functions/mse_function.R")
MSE_lasso <- MSE(predicted_response, test_response)
save(MSE_lasso, file = "../../data/MSE_lasso.RData")
scaled_data_2006 <- read.csv("../../data/scaled_data_2006.csv")
scaled_data_2006 <- scaled_data_2006[,-1]
total_response <- scaled_data_2006$UNEMP_RATE
total_response <- as.matrix(total_response)
total_predictors <- scaled_data_2006[,-which(names(training_data) == "UNEMP_RATE")]
total_predictors <- as.matrix(total_predictors)
full_lasso <- glmnet(total_predictors, total_response, lambda = lasso_model$lambda.min, alpha = 1, intercept = FALSE, standardize = FALSE)
full_coefficients <- coef(full_lasso)
save(full_coefficients, file = "../../data/full_coefficients_lasso.RData")
sink("../../data/lasso_model.txt")
print("model coefficients")
lasso_coef
print("prediction mse")
MSE_lasso
print("full model coefficients")
full_coefficients
sink()
MSE_lasso
training_short_data <- read.csv("../../data/training_data.csv")
training_short_data <- training_short_data[,-1]
#Getting response and predictors
response_short <- training_short_data$UNEMP_RATE
response_short <- as.matrix(response)
predictors_short <- training_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]
predictors_short <- as.matrix(predictors_short)
grid <- 10^seq(10, -2, length = 100)
set.seed(1)
lasso_short_model <- cv.glmnet(predictors_short, response_short, lambda = grid, alpha = 1, intercept = FALSE, standardize = FALSE)
lasso_short_coef <- coef(lasso_short_model, lasso_short_model$lambda.min)
save(lasso_short_coef,lasso_short_model, file = "../../data/lasso_model.RData")
png("../../images/CV_errors_lasso.png")
plot(lasso_short_model, main = "CV Errors Lasso")
dev.off()
test_short_data <- read.csv("../../data/test_data.csv")
test_short_data <- test_short_data[,-1]
test_short_predictors <- test_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]
test_short_predictors <- as.matrix(test_short_predictors)
test_short_response <- test_short_data$UNEMP_RATE
predicted_short_response <- predict(lasso_short_model, newx=test_short_predictors, s = "lambda.min", type = "response")
predicted_short_response <- as.vector(predicted_short_response)
source("../functions/mse_function.R")
MSE_short_lasso <- MSE(predicted_short_response, test_short_response)
save(MSE_short_lasso, file = "../../data/MSE_lasso.RData")
e
e
scaled_short_data_2006 <- read.csv("../../data/scaled_data_2006.csv")
scaled_short_data_2006 <- scaled_short_data_2006[,-1]
total_short_response <- scaled_short_data_2006$UNEMP_RATE
total_short_response <- as.matrix(total_short_response)
total_short_predictors <- scaled_short_data_2006[,-which(names(training_short_data) == "UNEMP_RATE")]
total_short_predictors <- as.matrix(total_short_predictors)
full_short_lasso <- glmnet(total_short_predictors, total_short_response, lambda = lasso_short_model$lambda.min, alpha = 1, intercept = FALSE, standardize = FALSE)
full_short_coefficients <- coef(full_lasso)
save(full_short_coefficients, file = "../../data/full_coefficients_lasso.RData")
sink("../../data/lasso_model.txt")
print("model coefficients")
lasso_short_coef
print("prediction mse")
MSE_short_lasso
print("full model coefficients")
full_short_coefficients
sink()
MSE_short_lasso
lasso_short_coef
training_short_data <- read.csv("../../data/training_short_data.csv")
training_short_data <- training_short_data[,-1]
#Getting response and predictors
response_short <- training_short_data$UNEMP_RATE
response_short <- as.matrix(response)
predictors_short <- training_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]
predictors_short <- as.matrix(predictors_short)
grid <- 10^seq(10, -2, length = 100)
set.seed(1)
lasso_short_model <- cv.glmnet(predictors_short, response_short, lambda = grid, alpha = 1, intercept = FALSE, standardize = FALSE)
lasso_short_coef <- coef(lasso_short_model, lasso_short_model$lambda.min)
save(lasso_short_coef,lasso_short_model, file = "../../data/lasso_model.RData")
png("../../images/CV_errors_lasso.png")
plot(lasso_short_model, main = "CV Errors Lasso")
dev.off()
test_short_data <- read.csv("../../data/test_data.csv")
test_short_data <- test_short_data[,-1]
test_short_predictors <- test_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]
test_short_predictors <- as.matrix(test_short_predictors)
test_short_response <- test_short_data$UNEMP_RATE
predicted_short_response <- predict(lasso_short_model, newx=test_short_predictors, s = "lambda.min", type = "response")
predicted_short_response <- as.vector(predicted_short_response)
source("../functions/mse_function.R")
predicted_short_response <- predict(lasso_short_model, newx=test_short_predictors, s = "lambda.min", type = "response")
plot(lasso_short_model, main = "CV Errors Lasso")
test_short_data <- read.csv("../../data/test_short_data.csv")
test_short_data <- test_short_data[,-1]
test_short_predictors <- test_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]
test_short_predictors <- as.matrix(test_short_predictors)
test_short_response <- test_short_data$UNEMP_RATE
predicted_short_response <- predict(lasso_short_model, newx=test_short_predictors, s = "lambda.min", type = "response")
predicted_short_response <- as.vector(predicted_short_response)
source("../functions/mse_function.R")
MSE_short_lasso <- MSE(predicted_short_response, test_short_response)
save(MSE_short_lasso, file = "../../data/MSE_lasso.RData")
scaled_short_data_2006 <- read.csv("../../data/scaled_data_2006.csv")
scaled_short_data_2006 <- scaled_short_data_2006[,-1]
total_short_response <- scaled_short_data_2006$UNEMP_RATE
total_short_response <- as.matrix(total_short_response)
total_short_predictors <- scaled_short_data_2006[,-which(names(training_short_data) == "UNEMP_RATE")]
total_short_predictors <- as.matrix(total_short_predictors)
full_short_lasso <- glmnet(total_short_predictors, total_short_response, lambda = lasso_short_model$lambda.min, alpha = 1, intercept = FALSE, standardize = FALSE)
full_short_coefficients <- coef(full_lasso)
save(full_short_coefficients, file = "../../data/full_coefficients_lasso.RData")
sink("../../data/lasso_model.txt")
print("model coefficients")
lasso_short_coef
print("prediction mse")
MSE_short_lasso
print("full model coefficients")
full_short_coefficients
sink()
full_short_coefficients
MSE_short_lasso
lasso_short_coef <- coef(lasso_short_model, lasso_short_model$lambda.min)
lasso_short_coef
sink("../../data/lasso_model.txt")
print("model coefficients")
lasso_short_coef
print("prediction mse")
MSE_short_lasso
print("full model coefficients")
full_short_coefficients
sink()
full_short_coefficients
scaled_short_data_2006 <- read.csv("../../data/scaled_short_data_2006.csv")
scaled_short_data_2006 <- scaled_short_data_2006[,-1]
total_short_response <- scaled_short_data_2006$UNEMP_RATE
total_short_response <- as.matrix(total_short_response)
total_short_predictors <- scaled_short_data_2006[,-which(names(training_short_data) == "UNEMP_RATE")]
total_short_predictors <- as.matrix(total_short_predictors)
full_short_lasso <- glmnet(total_short_predictors, total_short_response, lambda = lasso_short_model$lambda.min, alpha = 1, intercept = FALSE, standardize = FALSE)
full_short_coefficients <- coef(full_lasso)
save(full_short_coefficients, file = "../../data/full_coefficients_lasso.RData")
sink("../../data/lasso_model.txt")
print("model coefficients")
lasso_short_coef
print("prediction mse")
MSE_short_lasso
print("full model coefficients")
full_short_coefficients
sink()
full_short_coefficients
scaled_short_data_2006 <- read.csv("../../data/scaled_short_data_2006.csv")
scaled_short_data_2006 <- scaled_short_data_2006[,-1]
total_short_response <- scaled_short_data_2006$UNEMP_RATE
total_short_response <- as.matrix(total_short_response)
total_short_predictors <- scaled_short_data_2006[,-which(names(training_short_data) == "UNEMP_RATE")]
total_short_predictors <- as.matrix(total_short_predictors)
save(MSE_short_lasso, file = "../../data/MSE_short_lasso.RData")
save(MSE_lasso, file = "../../data/MSE_lasso.RData")
save(lasso_short_coef,lasso_short_model, file = "../../data/lasso_short_model.RData")
save(lasso_coef,lasso_model, file = "../../data/lasso_model.RData")
#Getting response and predictors
response_short <- training_short_data$UNEMP_RATE
response_short <- as.matrix(response)
predictors_short <- training_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]
predictors_short <- as.matrix(predictors_short)
save(full_short_coefficients, file = "../../data/full_short_coefficients_lasso.RData")
sink("../../data/lasso_short_model.txt")
print("model coefficients")
lasso_short_coef
print("prediction mse")
MSE_short_lasso
print("full model coefficients")
full_short_coefficients
sink()
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
validationplot
require(pls)
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
full_short_data <- read.csv(file = "../../data/scaled_short_data_2006.csv")
library("glmnet")
library("lars")
library("MASS")
training_data <- read.csv(file = "../../data/training_data.csv")
training_data <- training_data[,-1]
#formatting response and predictors
response <- training_data$UNEMP_RATE #Log of median income
response <- as.matrix(response)
predictors <- training_data[,-which(names(training_data) == "UNEMP_RATE")]  #everythning but median income
predictors <- as.matrix(predictors)
grid <- 10^seq(10, -2, length = 100)
set.seed(100)
ridge_model <- cv.glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
ridge_coef <- coef(ridge_model, ridge_model$lambda.min)
#saving coefficients of the model
save(ridge_coef, ridge_model, file = "../../data/ridge_model.RData")
#Adding Histograms to Images
png('../../images/CV_Errors_Ridge.png')
plot(ridge_model, main = "CV Errors Ridge")
dev.off()
plot(ridge_model, main = "CV Errors Ridge")
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$UNEMP_RATE
test_set <- test_set[,-1]
test_set <- test_set[,-which(names(training_data) == "UNEMP_RATE")]
test_predictors = as.matrix(test_set)
test_ridge <- predict(ridge_model, newx = test_predictors, s = "lambda.min", type="response")
save(test_ridge,file =  "../../data/testing_ridge.RData")
source("../functions/mse_function.R")
MSE_ridge = MSE(test_ridge, response)
save(MSE_ridge, file = "../../data/MSE_ridge.RData" )
MSE_ridge = MSE(test_ridge, response)
MSE_ridge
full_data <- read.csv(file = "../../data/scaled_data_2006.csv")
full_data <- full_data[,-1]
full_ridge = glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = ridge_model$lambda.min, alpha = 0)
predictors <- full_data[,-which(names(full_data) == "UNEMP_RATE")]  #everythning but median income
predictors <- as.matrix(predictors)
total_short_predictors <- scaled_short_data_2006[,-which(names(training_short_data) == "UNEMP_RATE")]
predictors <- full_data[,-which(names(full_data) == "UNEMP_RATE")]  #everythning but median income
predictors <- as.matrix(predictors)
#rerunning model on the full data set
full_ridge = glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = ridge_model$lambda.min, alpha = 0)
full_data <- read.csv(file = "../../data/scaled_data_2006.csv")
full_data <- full_data[,-1]
response <- full_data$UNEMP_RATE #median income
response <- as.matrix(response)
predictors <- full_data[,-which(names(full_data) == "UNEMP_RATE")]  #everythning but median income
predictors <- full_data[,-which(names(training_data) == "UNEMP_RATE")]  #everythning but median income
predictors <- as.matrix(predictors)
#rerunning model on the full data set
full_ridge = glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = ridge_model$lambda.min, alpha = 0)
#getting coefficients and saving
full_ridge_coef <- coef(full_ridge)
save(full_ridge_coef, file = "../../data/full_coeffecients_ridge.RData")
test_set <- read.csv(file = "../../data/test_data.csv")
response = test_set$UNEMP_RATE
test_set <- test_set[,-1]
test_set <- test_set[,-which(names(training_data) == "UNEMP_RATE")]
test_predictors = as.matrix(test_set)
test_ridge <- predict(ridge_model, newx = test_predictors, s = "lambda.min", type="response")
save(test_ridge,file =  "../../data/testing_ridge.RData")
source("../functions/mse_function.R")
MSE_ridge = MSE(test_ridge, response)
save(MSE_ridge, file = "../../data/MSE_ridge.RData" )
full_data <- read.csv(file = "../../data/scaled_data_2006.csv")
full_data <- full_data[,-1]
response <- full_data$UNEMP_RATE #median income
response <- as.matrix(response)
predictors <- full_data[,-which(names(training_data) == "UNEMP_RATE")]  #everythning but median income
predictors <- as.matrix(predictors)
#rerunning model on the full data set
full_ridge = glmnet(x = predictors, y = response, intercept = FALSE, standardize = FALSE, lambda = ridge_model$lambda.min, alpha = 0)
#getting coefficients and saving
full_ridge_coef <- coef(full_ridge)
save(full_ridge_coef, file = "../../data/full_coeffecients_ridge.RData")
#saving data from this model to a txt file
sink(file = "../../data/ridge_model.txt")
print("Coefficients for the Ridge Model")
ridge_coef
print("MSE for the Ridge Model")
MSE_ridge
print("Coefficients for the model run on the full data set")
full_ridge_coef
sink()
ridge_coef
MSE_ridge
full_ridge_coef
training_short_data <- read.csv(file = "../../data/training_short_data.csv")
training_short_data <- training_short_data[,-1]
#formatting response and predictors
response_short <- training_short_data$UNEMP_RATE #Log of median income
response_short <- as.matrix(response_short)
predictors_short <- training_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]  #everythning but median income
predictors_short <- as.matrix(predictors_short)
grid <- 10^seq(10, -2, length = 100)
set.seed(100)
ridge_short_model <- cv.glmnet(x = predictors_short, y = response_short, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
ridge_short_coef <- coef(ridge_short_model, ridge_short_model$lambda.min)
#saving coefficients of the model
save(ridge_short_coef, ridge_short_model, file = "../../data/ridge_short_model.RData")
ridge_short_coef
#Adding Histograms to Images
png('../../images/CV_Errors_short_Ridge.png')
plot(ridge_short_model, main = "CV Errors Ridge")
dev.off()
plot(ridge_short_model, main = "CV Errors Ridge")
test_short_set <- read.csv(file = "../../data/test_short_data.csv")
response = test_set$UNEMP_RATE
test_short_set <- test_short_set[,-1]
test_short_set <- test_short_set[,-which(names(training_short_data) == "UNEMP_RATE")]
test_short_predictors = as.matrix(test_short_set)
test_short_ridge <- predict(ridge_short_model, newx = test_short_predictors, s = "lambda.min", type="response")
save(test_short_ridge,file =  "../../data/testing_short_ridge.RData")
source("../functions/mse_function.R")
MSE_short_ridge = MSE(test_short_ridge, response)
save(MSE_short_ridge, file = "../../data/MSE_short_ridge.RData" )
full_short_data <- read.csv(file = "../../data/scaled_short_data_2006.csv")
full_short_data <- full_short_data[,-1]
response_short <- full_short_data$UNEMP_RATE #median income
response_short <- as.matrix(response)
predictors_short <- full_short_data[,-which(names(full_short_data) == "UNEMP_RATE")]  #everythning but median income
predictors_short <- as.matrix(predictors_short)
MSE_short_ridge
plot(ridge_short_model, main = "CV Errors Ridge")
response_short = test_set$UNEMP_RATE
test_short_set <- test_short_set[,-1]
test_short_set <- test_short_set[,-which(names(training_short_data) == "UNEMP_RATE")]
test_short_predictors = as.matrix(test_short_set)
test_short_ridge <- predict(ridge_short_model, newx = test_short_predictors, s = "lambda.min", type="response")
save(test_short_ridge,file =  "../../data/testing_short_ridge.RData")
test_short_data <- read.csv(file = "../../data/test_short_data.csv")
response_short = test_set$UNEMP_RATE
test_short_set <- test_short_set[,-1]
test_short_set <- test_short_set[,-which(names(training_short_data) == "UNEMP_RATE")]
test_short_predictors = as.matrix(test_short_set)
test_short_ridge <- predict(ridge_short_model, newx = test_short_predictors, s = "lambda.min", type="response")
test_short_data <- read.csv(file = "../../data/test_short_data.csv")
response_short = test_set$UNEMP_RATE
test_short_data <- test_short_data[,-1]
test_short_data <- test_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]
test_short_predictors = as.matrix(test_short_data)
test_short_ridge <- predict(ridge_short_model, newx = test_short_predictors, s = "lambda.min", type="response")
save(test_short_ridge,file =  "../../data/testing_short_ridge.RData")
source("../functions/mse_function.R")
MSE_short_ridge = MSE(test_short_ridge, response)
MSE_short_ridge
MSE_short_ridge = MSE(test_short_ridge, response)
MSE_short_ridge = MSE(test_short_ridge, response_short)
MSE_short_ridge = MSE(test_short_ridge, response_short)
response_short <- training_short_data$UNEMP_RATE #Log of median income
response_short <- as.matrix(response_short)
predictors_short <- training_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]  #everythning but median income
predictors_short <- as.matrix(predictors_short)
grid <- 10^seq(10, -2, length = 100)
set.seed(100)
ridge_short_model <- cv.glmnet(x = predictors_short, y = response_short, intercept = FALSE, standardize = FALSE, lambda = grid, alpha = 0)
ridge_short_coef <- coef(ridge_short_model, ridge_short_model$lambda.min)
#saving coefficients of the model
save(ridge_short_coef, ridge_short_model, file = "../../data/ridge_short_model.RData")
#Adding Histograms to Images
png('../../images/CV_Errors_short_Ridge.png')
plot(ridge_short_model, main = "CV Errors Ridge")
dev.off()
plot(ridge_short_model, main = "CV Errors Ridge")
test_short_data <- read.csv(file = "../../data/test_short_data.csv")
response_short = test_short_set$UNEMP_RATE
test_short_data <- test_short_data[,-1]
test_short_data <- test_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]
test_short_predictors = as.matrix(test_short_data)
test_short_ridge <- predict(ridge_short_model, newx = test_short_predictors, s = "lambda.min", type="response")
save(test_short_ridge,file =  "../../data/testing_short_ridge.RData")
source("../functions/mse_function.R")
MSE_short_ridge = MSE(test_short_ridge, response_short)
MSE_short_ridge
test_short_data <- read.csv(file = "../../data/test_short_data.csv")
response_short = test_short_data$UNEMP_RATE
test_short_data <- test_short_data[,-1]
test_short_data <- test_short_data[,-which(names(training_short_data) == "UNEMP_RATE")]
test_short_predictors = as.matrix(test_short_data)
test_short_ridge <- predict(ridge_short_model, newx = test_short_predictors, s = "lambda.min", type="response")
save(test_short_ridge,file =  "../../data/testing_short_ridge.RData")
source("../functions/mse_function.R")
MSE_short_ridge = MSE(test_short_ridge, response_short)
MSE_short_ridge
save(MSE_short_ridge, file = "../../data/MSE_short_ridge.RData" )
full_short_data <- read.csv(file = "../../data/scaled_short_data_2006.csv")
full_short_data <- full_short_data[,-1]
response_short <- full_short_data$UNEMP_RATE #median income
response_short <- as.matrix(response)
predictors_short <- full_short_data[,-which(names(full_short_data) == "UNEMP_RATE")]  #everythning but median income
response_short <- as.matrix(response_short)
predictors_short <- full_short_data[,-which(names(full_short_data) == "UNEMP_RATE")]  #everythning but median income
predictors_short <- as.matrix(predictors_short)
#rerunning model on the full data set
full_short_ridge = glmnet(x = predictors_short, y = response_short, intercept = FALSE, standardize = FALSE, lambda = ridge_short_model$lambda.min, alpha = 0)
full_short_ridge
#getting coefficients and saving
full_short_ridge_coef <- coef(full_short_ridge)
save(full_short_ridge_coef, file = "../../data/full_short_coeffecients_ridge.RData")
#saving data from this model to a txt file
sink(file = "../../data/ridge_short_model.txt")
print("Coefficients for the Ridge Model")
ridge_short_coef
print("MSE for the Ridge Model")
MSE_short_ridge
print("Coefficients for the model run on the full data set")
full_short_ridge_coef
sink()
ridge_short_coef
t
full_short_ridge_coef
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
predplot(pcr_short_model)
coefplot(pcr_short_model)
predplot(ridge_model)
coefplot(ridge_model)
coefplot(ridge_coef)
coefplot(lasso_model)
coefplot(pcr_model)
setwd("~/Documents/Fall 2016/Stats 159/projects/proj3/slides")
setwd("~/Documents/Fall 2016/Stats 159/projects/proj3/code/scripts")
training_data <- read.csv("../../data/training_data.csv")
col_names(training_data)
colnames(training_data)
training_data <- training_data[,-1]
colnames(training_data)
test_data <- read.csv("../../data/test_data.csv")
colnames(test_data)
test_data <- test_data[,-1]
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
?text
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
?round
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
?text
?plot
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
shiny::runApp('~/Documents/Fall 2016/Stats 159/projects/proj3/shiny')
model_load <- paste("../data/","ridge", "_model.RData", sep = "")
model_load <- paste("../data/","ridge", "_model.RData", sep = "")
load(model_load)
setwd("~/Documents/Fall 2016/Stats 159/projects/proj3/shiny")
load(model_load)
model <- paste(input$Model,"_model", sep = "")
model <- paste("ridge","_model", sep = "")
model_var = as.symbol(model)
model_var = as.symbol(model)
plot(eval(model_var), main = paste(model, "plot", sep = " "))
plot(eval(model_var), main = paste(model, "plot", sep = " "))
shiny::runApp()
setwd("~/Documents/Fall 2016/Stats 159/projects/proj3/report/Sections")
?as.data.frame.matrix
?"dgCMatrix-class"
>knit
?knitr
?render
?knit
